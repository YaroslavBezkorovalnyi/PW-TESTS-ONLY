import { test, expect } from '@playwright/test';
import { NavigationPage } from '../POM/navigationsPage1';
import { FormLayoutsPage } from '../POM/formLayoutsPage1';

// Run tests in this file with portrait-like viewport.
test.use({ viewport: { width: 1280, height: 900 } });

test.beforeEach(async ({ page }) => {
  await page.goto('/');
});

// * These tests use POM

test('Fill in the "Inline From"', { tag: ['@formsPage', '@inLineForm'] }, async ({ page }) => {
  const navigateTo = new NavigationPage(page);
  const onFormLayoutsPage = new FormLayoutsPage(page);

  await navigateTo.formLayoutsPage();
  await onFormLayoutsPage.submitInlineFormWithCreds('Daisukee Kambe', 'Test@test.com', true);
});

test('Fill in the "Usinng the Grid" form', { tag: ['@formsPage', '@usingTheGridForm'] }, async ({ page }) => {
  const navigateTo = new NavigationPage(page);
  const onFormLayoutsPage = new FormLayoutsPage(page);

  await navigateTo.formLayoutsPage();
  await onFormLayoutsPage.submitUsingTheGridFormwithCredsAndRadio('Test@test1.com', 'PassW1', 'Option 1');
  await onFormLayoutsPage.submitUsingTheGridFormwithCredsAndRadio('Test@test2.com', 'Password1234', 'Option 2');
});

test('Fill in the - Form without Labels - ', { tag: ['@formsPage', '@withoutLabelsForm'] }, async ({ page }) => {
  const navigateTo = new NavigationPage(page);
  const onFormLayoutsPage = new FormLayoutsPage(page);

  await navigateTo.formLayoutsPage();
  await onFormLayoutsPage.submitFormWithoutLabelsWithInfoAndText(
    'Sponsor',
    'TestUserName1',
    'Text generated by lorem ipsum textgen',
    200
  );
});

test('Fill in the "Horizontal form" ', { tag: ['@formsPage', '@horizontalForm'] }, async ({ page }) => {
  const navigateTo = new NavigationPage(page);
  const onFormLayoutsPage = new FormLayoutsPage(page);

  await navigateTo.formLayoutsPage();
  await onFormLayoutsPage.sumbitHorizontalFormWithCreds('TestEmail1@test.com', 'PasswordTest1', false);
});

test('Fill in the "Basic form" ', { tag: ['@formsPage', '@basicForm'] }, async ({ page }) => {
  const navigateTo = new NavigationPage(page);
  const onFormLayoutsPage = new FormLayoutsPage(page);

  await navigateTo.formLayoutsPage();
  await onFormLayoutsPage.submitTheBasicFormWithCreds('TestEmail2@test.com', 'PasswordTest2', false);
});

test('Fill in the "Block form" ', { tag: ['@formsPage', '@blockForm'] }, async ({ page }) => {
  const navigateTo = new NavigationPage(page);
  const onFormLayoutsPage = new FormLayoutsPage(page);

  await navigateTo.formLayoutsPage();
  await onFormLayoutsPage.submitBlockFormWithInfo(
    'John',
    'Doe',
    'TestEmail2@test.com',
    'http://localhost:4200/pages/forms/layouts'
  );
});
